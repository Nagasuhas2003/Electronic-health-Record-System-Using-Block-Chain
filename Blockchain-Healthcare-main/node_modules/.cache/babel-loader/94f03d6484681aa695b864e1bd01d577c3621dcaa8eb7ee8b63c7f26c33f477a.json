{"ast":null,"code":"var _jsxFileName = \"D:\\\\EHR-main\\\\EHR-main\\\\Blockchain-Healthcare-main\\\\src\\\\Healthcare.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\n\n// Replace with your deployed contract address\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x14eDA536754d1753590adD974429adD417B50eE1\";\n// Replace with your contract ABI (the JSON output after compilation)\nconst contractABI = [{\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"hospital\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"addHospital\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"patientId\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"name\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"condition\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"treatment\",\n    \"type\": \"string\"\n  }],\n  \"name\": \"addPatientRecord\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"hospital\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"removeHospital\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"constructor\"\n}, {\n  \"inputs\": [],\n  \"name\": \"admin\",\n  \"outputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"\",\n    \"type\": \"address\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"patientId\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"getPatientRecord\",\n  \"outputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"name\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"condition\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"treatment\",\n    \"type\": \"string\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}];\nconst HealthcareRecords = () => {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [patientId, setPatientId] = useState(\"\");\n  const [patientName, setPatientName] = useState(\"\");\n  const [patientCondition, setPatientCondition] = useState(\"\");\n  const [patientTreatment, setPatientTreatment] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [tamperingError, setTamperingError] = useState(\"\"); // Tampering error state\n  const [patientRecord, setPatientRecord] = useState(null);\n  useEffect(() => {\n    const initialize = async () => {\n      // Connect to Ethereum\n      if (typeof window.ethereum !== \"undefined\") {\n        const tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(tempProvider);\n        const signer = tempProvider.getSigner();\n        const userAddress = await signer.getAddress();\n        setWalletAddress(userAddress);\n        const tempContract = new ethers.Contract(contractAddress, contractABI, signer);\n        setContract(tempContract);\n      } else {\n        setError(\"Please install MetaMask.\");\n      }\n    };\n    initialize();\n  }, []);\n\n  // Add patient record function with tampering detection\n  const addPatientRecord = async () => {\n    try {\n      if (!patientId || !patientName || !patientCondition || !patientTreatment) {\n        setError(\"All fields are required.\");\n        return;\n      }\n\n      // Check if the patient already has a record\n      const existingRecord = await contract.getPatientRecord(patientId);\n      if (existingRecord[0] && existingRecord[0] !== \"\") {\n        setTamperingError(\"Warning: This patient ID already exists. Record might be tampered!\");\n        return;\n      }\n\n      // Add patient record if it doesn't exist\n      const tx = await contract.addPatientRecord(patientId, patientName, patientCondition, patientTreatment);\n      await tx.wait(); // Wait for the transaction to be mined\n      setTamperingError(\"\"); // Clear tampering error\n      setError(\"\");\n      alert(\"Record added successfully!\");\n    } catch (err) {\n      console.error(\"Error adding record:\", err);\n      setError(\"Error adding record.\");\n    }\n  };\n\n  // Fetch patient record function\n  const fetchPatientRecord = async () => {\n    try {\n      if (!patientId) {\n        setError(\"Patient ID is required.\");\n        return;\n      }\n      const record = await contract.getPatientRecord(patientId);\n      setPatientRecord(record);\n      setError(\"\");\n      setTamperingError(\"\"); // Clear tampering error\n    } catch (err) {\n      console.error(\"Error fetching record:\", err);\n      setError(\"Error fetching record.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"healthcare-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Healthcare Records Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Patient Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Patient ID\",\n        value: patientId,\n        onChange: e => setPatientId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Patient Name\",\n        value: patientName,\n        onChange: e => setPatientName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Condition\",\n        value: patientCondition,\n        onChange: e => setPatientCondition(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Treatment\",\n        value: patientTreatment,\n        onChange: e => setPatientTreatment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addPatientRecord,\n        children: \"Add Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Fetch Patient Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Patient ID\",\n        value: patientId,\n        onChange: e => setPatientId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchPatientRecord,\n        children: \"Fetch Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), patientRecord && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Patient Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", patientRecord[0]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Condition: \", patientRecord[1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Treatment: \", patientRecord[2]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }, this), tamperingError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error tampering\",\n      children: tamperingError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 26\n    }, this), \" \", walletAddress && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected Wallet: \", walletAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(HealthcareRecords, \"EHy1Y/6cAU0JwbNzUYztWCJDgkU=\");\n_c = HealthcareRecords;\nexport default HealthcareRecords;\nvar _c;\n$RefreshReg$(_c, \"HealthcareRecords\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","contractAddress","contractABI","HealthcareRecords","_s","provider","setProvider","contract","setContract","walletAddress","setWalletAddress","patientId","setPatientId","patientName","setPatientName","patientCondition","setPatientCondition","patientTreatment","setPatientTreatment","error","setError","tamperingError","setTamperingError","patientRecord","setPatientRecord","initialize","window","ethereum","tempProvider","providers","Web3Provider","signer","getSigner","userAddress","getAddress","tempContract","Contract","addPatientRecord","existingRecord","getPatientRecord","tx","wait","alert","err","console","fetchPatientRecord","record","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/EHR-main/EHR-main/Blockchain-Healthcare-main/src/Healthcare.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\n\n// Replace with your deployed contract address\nconst contractAddress = \"0x14eDA536754d1753590adD974429adD417B50eE1\"; \n// Replace with your contract ABI (the JSON output after compilation)\nconst contractABI =[\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"hospital\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"addHospital\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"patientId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"name\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"condition\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"treatment\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"addPatientRecord\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"hospital\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"removeHospital\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"admin\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"patientId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getPatientRecord\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"name\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"condition\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"treatment\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t}\n];\n\nconst HealthcareRecords = () => {\n  const [provider, setProvider] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [patientId, setPatientId] = useState(\"\");\n  const [patientName, setPatientName] = useState(\"\");\n  const [patientCondition, setPatientCondition] = useState(\"\");\n  const [patientTreatment, setPatientTreatment] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [tamperingError, setTamperingError] = useState(\"\"); // Tampering error state\n  const [patientRecord, setPatientRecord] = useState(null);\n\n  useEffect(() => {\n    const initialize = async () => {\n      // Connect to Ethereum\n      if (typeof window.ethereum !== \"undefined\") {\n        const tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(tempProvider);\n        const signer = tempProvider.getSigner();\n        const userAddress = await signer.getAddress();\n        setWalletAddress(userAddress);\n        const tempContract = new ethers.Contract(contractAddress, contractABI, signer);\n        setContract(tempContract);\n      } else {\n        setError(\"Please install MetaMask.\");\n      }\n    };\n    initialize();\n  }, []);\n\n  // Add patient record function with tampering detection\n  const addPatientRecord = async () => {\n    try {\n      if (!patientId || !patientName || !patientCondition || !patientTreatment) {\n        setError(\"All fields are required.\");\n        return;\n      }\n\n      // Check if the patient already has a record\n      const existingRecord = await contract.getPatientRecord(patientId);\n\n      if (existingRecord[0] && existingRecord[0] !== \"\") {\n        setTamperingError(\"Warning: This patient ID already exists. Record might be tampered!\");\n        return;\n      }\n\n      // Add patient record if it doesn't exist\n      const tx = await contract.addPatientRecord(\n        patientId,\n        patientName,\n        patientCondition,\n        patientTreatment\n      );\n      await tx.wait(); // Wait for the transaction to be mined\n      setTamperingError(\"\"); // Clear tampering error\n      setError(\"\");\n      alert(\"Record added successfully!\");\n    } catch (err) {\n      console.error(\"Error adding record:\", err);\n      setError(\"Error adding record.\");\n    }\n  };\n\n  // Fetch patient record function\n  const fetchPatientRecord = async () => {\n    try {\n      if (!patientId) {\n        setError(\"Patient ID is required.\");\n        return;\n      }\n\n      const record = await contract.getPatientRecord(patientId);\n      setPatientRecord(record);\n      setError(\"\");\n      setTamperingError(\"\"); // Clear tampering error\n    } catch (err) {\n      console.error(\"Error fetching record:\", err);\n      setError(\"Error fetching record.\");\n    }\n  };\n\n  return (\n    <div className=\"healthcare-container\">\n      <h1>Healthcare Records Management</h1>\n      <div>\n        <h2>Add Patient Record</h2>\n        <input\n          type=\"number\"\n          placeholder=\"Patient ID\"\n          value={patientId}\n          onChange={(e) => setPatientId(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Patient Name\"\n          value={patientName}\n          onChange={(e) => setPatientName(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Condition\"\n          value={patientCondition}\n          onChange={(e) => setPatientCondition(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Treatment\"\n          value={patientTreatment}\n          onChange={(e) => setPatientTreatment(e.target.value)}\n        />\n        <button onClick={addPatientRecord}>Add Record</button>\n      </div>\n      <div>\n        <h2>Fetch Patient Record</h2>\n        <input\n          type=\"number\"\n          placeholder=\"Patient ID\"\n          value={patientId}\n          onChange={(e) => setPatientId(e.target.value)}\n        />\n        <button onClick={fetchPatientRecord}>Fetch Record</button>\n      </div>\n      {patientRecord && (\n        <div>\n          <h3>Patient Record</h3>\n          <p>Name: {patientRecord[0]}</p>\n          <p>Condition: {patientRecord[1]}</p>\n          <p>Treatment: {patientRecord[2]}</p>\n        </div>\n      )}\n      {error && <p className=\"error\">{error}</p>}\n      {tamperingError && <p className=\"error tampering\">{tamperingError}</p>} {/* Display tampering warning */}\n      {walletAddress && <p>Connected Wallet: {walletAddress}</p>}\n    </div>\n  );\n};\n\nexport default HealthcareRecords;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}